
heat_template_version: 2015-10-15

description: |
   #### gen-and-upload.yml
   #### Creates Rackspace Cloud Server
   #### Installs/configures swiftly, then creates Cloud Files containers.
   #### Number of containers and number of objects per container can be set.
   #### Author: Brian King
   #### version: 0.0.2a
   #### last modified: 2019-09-21

parameter_groups:

- label: Contact info
  parameters:
    - emailAddr

- label: Account info
  parameters:
    - rsUserName
    - rsRegion
    - rsApiKey

- label: Server info
  parameters:
    - serverFlavor

- label: Container info
  parameters:
    - numContainers
    - numObjects

parameters:

# begin contact info

  emailAddr:
    type: string
    default: myemail@example.com
    label: This email address receives container deletion notifications.

# begin account info

  rsUserName:
    type: string
    default: rsUserName
    label: Your Rackspace Cloud username

  rsRegion:
    type: string
    default: lon
    label: Rackspace Cloud Region
    description: 'Use the region which hosts the Cloud Files you wish to delete.'
    constraints:
      - allowed_values:
        - dfw
        - hkg
        - iad
        - lon
        - ord
        - syd

  rsApiKey:
    type: string
    default: rsApiKey
    label: 'Your Rackspace Cloud API key'
    description: 'API key found under username > My Profile & Settings > Security Settings'

# begin container info

  numContainers:
    type: number
    label: 'Number of containers to create'
    description: Enter a number between 1,000 and 500,000
    default: 1000
    constraints:
     - range: { min: 1000, max: 500000 }

  numObjects:
    type: number
    label: 'Number of objects to create per container'
    description: Enter a number between 1,000 and 500,000
    default: 100000
    constraints:
     - range: { min: 1000, max: 500000 }

# begin server info

  serverFlavor:
    type: string
    default: 15 GB Memory v1
    label: Server Flavor Name or ID (such as 4 GB General Purpose v1)
    description: Choose flavor from list below
    constraints:
    - allowed_values:
      - 15 GB Memory v1
      - 30 GB Memory v1
      - 60 GB Memory v1
      - 120 GB Memory v1
      - 240 GB Memory v1
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      description: must be a valid Rackspace Cloud Server flavor.


resources:

  serverPass:
      type: OS::Heat::RandomString

  stackSSHKey:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_name" }
      save_private_key: true

  serverBootVolume:
    type: OS::Cinder::Volume
    properties:
      image: 'CentOS 7 (PVHVM)'
      size: 50
      volume_type: SSD
      name:
        str_replace:
          params:
            $user: { get_param: [ rsUserName ]}
          template: $user-gen-and-upload

  serverSwiftlyConfig:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
          - content:
              str_replace:
                params:
                 $rsUserName: { get_param: rsUserName }
                 $rsRegion: { get_param: rsRegion }
                 $rsApiKey: { get_param: rsApiKey }
                template: |
                          [swiftly]
                          auth_user = $rsUsername
                          auth_key = $rsApiKey
                          auth_url = https://identity.api.rackspacecloud.com/v2.0
                          region = $rsRegion
                          snet = True
            owner: root:root
            path: /root/.swiftly.conf
            permissions:
              '0600'

  serverInstanceConfig:
     type: OS::Heat::SoftwareConfig
     properties:
       group: swiftly
       config:
         str_replace:
           params:
             $numContainers:  { get_param: numContainers }
             $numObjects:  { get_param: numObjects }
           template: |
                      #!/bin/bash
                      #adding swap just in case
                      fallocate -l 2G  /.SWAPFILE
                      chmod 0600 /.SWAPFILE
                      mkswap /.SWAPFILE
                      swapon /.SWAPFILE
                      printf "%s\n" "/.SWAPFILE swap swap defaults 0 0" >> /etc/fstab

                      yum -y install python-pip screen
                      pip install swiftly eventlet

                      dd if=/dev/urandom of=/root/garbfile00 bs=1 count=1


                      for ctr in {0..$numContainers}
                        do
                          export ctr
                          swiftly -v --cache-auth --conf="/root/.swiftly.conf" put testcontainer${ctr}
                          for obj in {0..$numObjects}
                              do
                              export obj
                              swiftly -v --cache-auth --conf="/root/.swiftly.conf" put -i /root/garbfile00 testcontainer${ctr}/garbfile${obj}
                              done
                        done


  swiftlyServerCloudInit:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: serverSwiftlyConfig }
      - config: { get_resource: serverInstanceConfig }

  serverInstance:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          params:
            $user: { get_param: [ rsUserName ]}
          template: $user-gen-and-upload
      block_device_mapping:
        - device_name: vda
          volume_id: { get_resource: serverBootVolume }
          delete_on_termination: True
      admin_pass: { get_attr: [ serverPass, value ]}
      key_name: { get_resource: stackSSHKey }
      flavor: { get_param: serverFlavor }
      config_drive: True
      user_data: { get_resource: swiftlyServerCloudInit }
      metadata:
        created_by: cn_swiftly_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'

outputs:

  serverPassDisplay:
    value: { get_attr: [ serverPass, value ] }
    description: 'Admin Password of Swiftly Server'

  serverPublicIPs:
     value: { get_attr: [serverInstance, networks, public] }
     description: 'Public IPs of Swiftly Server'

  stackPrivateSSHKey:
    value: { get_attr: ['stackSSHKey', 'private_key'] }
    description: 'private Key for accessing Swiftly Server'

  # containersToDeleteDisplay:
  #   value:
  #     str_split:
  #       - ','
  #       - { get_param: containersToDelete }
  #   description: 'containers specified to delete'
